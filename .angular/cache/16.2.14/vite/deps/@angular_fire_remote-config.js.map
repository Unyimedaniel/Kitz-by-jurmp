{
  "version": 3,
  "sources": ["../../../../../node_modules/rxfire/remote-config/index.esm.js", "../../../../../node_modules/@angular/fire/fesm2015/angular-fire-remote-config.js"],
  "sourcesContent": ["import { Observable } from 'rxjs';\nimport { ensureInitialized, getValue as getValue$1, getString as getString$1, getNumber as getNumber$1, getBoolean as getBoolean$1, getAll as getAll$1 } from 'firebase/remote-config';\n\nfunction parameter$(_a) {\n    var remoteConfig = _a.remoteConfig, key = _a.key, getter = _a.getter;\n    return new Observable(function (subscriber) {\n        ensureInitialized(remoteConfig).then(function () {\n            // 'this' for the getter loses context in the next()\n            // call, so it needs to be bound.\n            var boundGetter = getter.bind(remoteConfig);\n            subscriber.next(boundGetter(remoteConfig, key));\n        });\n    });\n}\nfunction getValue(remoteConfig, key) {\n    var getter = getValue$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getString(remoteConfig, key) {\n    var getter = getString$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getNumber(remoteConfig, key) {\n    var getter = getNumber$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getBoolean(remoteConfig, key) {\n    var getter = getBoolean$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getAll(remoteConfig) {\n    var getter = getAll$1;\n    // No key is needed for getAll()\n    return parameter$({ remoteConfig: remoteConfig, key: '', getter: getter });\n}\n\nexport { getAll, getBoolean, getNumber, getString, getValue };\n\n", "import { ɵgetAllInstancesOf, ɵisRemoteConfigSupportedFactory, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, APP_INITIALIZER, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { getValue as getValue$1, getString as getString$1, getNumber as getNumber$1, getBoolean as getBoolean$1, getAll as getAll$1 } from 'rxfire/remote-config';\nimport { activate as activate$1, ensureInitialized as ensureInitialized$1, fetchAndActivate as fetchAndActivate$1, fetchConfig as fetchConfig$1, getAll as getAll$2, getBoolean as getBoolean$2, getNumber as getNumber$2, getRemoteConfig as getRemoteConfig$1, getString as getString$2, getValue as getValue$2, setLogLevel as setLogLevel$1 } from 'firebase/remote-config';\nexport * from 'firebase/remote-config';\nclass RemoteConfig {\n  constructor(remoteConfig) {\n    return remoteConfig;\n  }\n}\nconst REMOTE_CONFIG_PROVIDER_NAME = 'remote-config';\nclass RemoteConfigInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME);\n  }\n}\nconst remoteConfigInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME))), distinct());\nconst PROVIDED_REMOTE_CONFIG_INSTANCES = new InjectionToken('angularfire2.remote-config-instances');\nfunction defaultRemoteConfigInstanceFactory(provided, defaultApp) {\n  if (!ɵisRemoteConfigSupportedFactory.sync()) {\n    return null;\n  }\n  const defaultRemoteConfig = ɵgetDefaultInstanceOf(REMOTE_CONFIG_PROVIDER_NAME, provided, defaultApp);\n  return defaultRemoteConfig && new RemoteConfig(defaultRemoteConfig);\n}\nfunction remoteConfigInstanceFactory(fn) {\n  return (zone, injector) => {\n    if (!ɵisRemoteConfigSupportedFactory.sync()) {\n      return null;\n    }\n    const remoteConfig = zone.runOutsideAngular(() => fn(injector));\n    return new RemoteConfig(remoteConfig);\n  };\n}\nconst REMOTE_CONFIG_INSTANCES_PROVIDER = {\n  provide: RemoteConfigInstances,\n  deps: [[new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES]]\n};\nconst DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER = {\n  provide: RemoteConfig,\n  useFactory: defaultRemoteConfigInstanceFactory,\n  deps: [[new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES], FirebaseApp]\n};\nclass RemoteConfigModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'rc');\n  }\n}\nRemoteConfigModule.ɵfac = function RemoteConfigModule_Factory(t) {\n  return new (t || RemoteConfigModule)();\n};\nRemoteConfigModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RemoteConfigModule\n});\nRemoteConfigModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER, {\n    provide: APP_INITIALIZER,\n    useValue: ɵisRemoteConfigSupportedFactory.async,\n    multi: true\n  }]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RemoteConfigModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER, {\n        provide: APP_INITIALIZER,\n        useValue: ɵisRemoteConfigSupportedFactory.async,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nfunction provideRemoteConfig(fn, ...deps) {\n  return {\n    ngModule: RemoteConfigModule,\n    providers: [{\n      provide: PROVIDED_REMOTE_CONFIG_INSTANCES,\n      useFactory: remoteConfigInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, ...deps]\n    }]\n  };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getValueChanges = ɵzoneWrap(getValue$1, true);\nconst getStringChanges = ɵzoneWrap(getString$1, true);\nconst getNumberChanges = ɵzoneWrap(getNumber$1, true);\nconst getBooleanChanges = ɵzoneWrap(getBoolean$1, true);\nconst getAllChanges = ɵzoneWrap(getAll$1, true);\nconst isSupported = ɵisRemoteConfigSupportedFactory.async;\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst activate = ɵzoneWrap(activate$1, true);\nconst ensureInitialized = ɵzoneWrap(ensureInitialized$1, true);\nconst fetchAndActivate = ɵzoneWrap(fetchAndActivate$1, true);\nconst fetchConfig = ɵzoneWrap(fetchConfig$1, true);\nconst getAll = ɵzoneWrap(getAll$2, true);\nconst getBoolean = ɵzoneWrap(getBoolean$2, true);\nconst getNumber = ɵzoneWrap(getNumber$2, true);\nconst getRemoteConfig = ɵzoneWrap(getRemoteConfig$1, true);\nconst getString = ɵzoneWrap(getString$2, true);\nconst getValue = ɵzoneWrap(getValue$2, true);\nconst setLogLevel = ɵzoneWrap(setLogLevel$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RemoteConfig, RemoteConfigInstances, RemoteConfigModule, activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getAllChanges, getBoolean, getBooleanChanges, getNumber, getNumberChanges, getRemoteConfig, getString, getStringChanges, getValue, getValueChanges, isSupported, provideRemoteConfig, remoteConfigInstance$, setLogLevel };\n"],
  "mappings": "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",
  "names": ["getValue", "getString", "getNumber", "getBoolean", "getAll", "getValue", "getString", "getNumber", "getBoolean", "getAll", "activate", "ensureInitialized", "fetchAndActivate", "fetchConfig", "getRemoteConfig", "setLogLevel"]
}
