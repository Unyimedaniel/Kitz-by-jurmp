{
  "version": 3,
  "sources": ["../../../../../node_modules/@angular/fire/fesm2015/angular-fire-auth-guard.js"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { of, pipe } from 'rxjs';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport * as i2 from '@angular/fire/auth';\nimport { user } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { VERSION } from '@angular/fire';\nconst loggedIn = map(user => !!user);\nclass AuthGuard {\n  constructor(router, auth) {\n    this.router = router;\n    this.auth = auth;\n    this.canActivate = (next, state) => {\n      const authPipeFactory = next.data.authGuardPipe || (() => loggedIn);\n      return user(this.auth).pipe(take(1), authPipeFactory(next, state), map(can => {\n        if (typeof can === 'boolean') {\n          return can;\n        } else if (Array.isArray(can)) {\n          return this.router.createUrlTree(can);\n        } else {\n          // TODO(EdricChan03): Add tests\n          return this.router.parseUrl(can);\n        }\n      }));\n    };\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.Auth));\n};\nAuthGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'any'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: i1.Router\n    }, {\n      type: i2.Auth\n    }];\n  }, null);\n})();\nconst canActivate = pipe => ({\n  canActivate: [AuthGuard],\n  data: {\n    authGuardPipe: pipe\n  }\n});\nconst isNotAnonymous = map(user => !!user && !user.isAnonymous);\nconst idTokenResult = switchMap(user => user ? user.getIdTokenResult() : of(null));\nconst emailVerified = map(user => !!user && user.emailVerified);\nconst customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\nconst hasCustomClaim = claim => pipe(customClaims, map(claims => claims.hasOwnProperty(claim)));\nconst redirectUnauthorizedTo = redirect => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\nconst redirectLoggedInTo = redirect => pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));\nclass AuthGuardModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'auth-guard');\n  }\n}\nAuthGuardModule.ɵfac = function AuthGuardModule_Factory(t) {\n  return new (t || AuthGuardModule)();\n};\nAuthGuardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AuthGuardModule\n});\nAuthGuardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [AuthGuard]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthGuardModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AuthGuard]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AuthGuard, AuthGuardModule, canActivate, customClaims, emailVerified, hasCustomClaim, idTokenResult, isNotAnonymous, loggedIn, redirectLoggedInTo, redirectUnauthorizedTo };\n"],
  "mappings": "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",
  "names": ["user", "pipe", "idTokenResult", "loggedIn"]
}
