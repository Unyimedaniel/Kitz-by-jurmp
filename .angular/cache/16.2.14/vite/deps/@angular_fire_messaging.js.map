{
  "version": 3,
  "sources": ["../../../../../node_modules/@angular/fire/fesm2015/angular-fire-messaging.js"],
  "sourcesContent": ["import { ɵgetAllInstancesOf, ɵisMessagingSupportedFactory, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, APP_INITIALIZER, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { deleteToken as deleteToken$1, getMessaging as getMessaging$1, getToken as getToken$1, onMessage as onMessage$1 } from 'firebase/messaging';\nexport * from 'firebase/messaging';\nclass Messaging {\n  constructor(messaging) {\n    return messaging;\n  }\n}\nconst MESSAGING_PROVIDER_NAME = 'messaging';\nclass MessagingInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(MESSAGING_PROVIDER_NAME);\n  }\n}\nconst messagingInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(MESSAGING_PROVIDER_NAME))), distinct());\nconst PROVIDED_MESSAGING_INSTANCES = new InjectionToken('angularfire2.messaging-instances');\nfunction defaultMessagingInstanceFactory(provided, defaultApp) {\n  if (!ɵisMessagingSupportedFactory.sync()) {\n    return null;\n  }\n  const defaultMessaging = ɵgetDefaultInstanceOf(MESSAGING_PROVIDER_NAME, provided, defaultApp);\n  return defaultMessaging && new Messaging(defaultMessaging);\n}\nfunction messagingInstanceFactory(fn) {\n  return (zone, injector) => {\n    if (!ɵisMessagingSupportedFactory.sync()) {\n      return null;\n    }\n    const messaging = zone.runOutsideAngular(() => fn(injector));\n    return new Messaging(messaging);\n  };\n}\nconst MESSAGING_INSTANCES_PROVIDER = {\n  provide: MessagingInstances,\n  deps: [[new Optional(), PROVIDED_MESSAGING_INSTANCES]]\n};\nconst DEFAULT_MESSAGING_INSTANCE_PROVIDER = {\n  provide: Messaging,\n  useFactory: defaultMessagingInstanceFactory,\n  deps: [[new Optional(), PROVIDED_MESSAGING_INSTANCES], FirebaseApp]\n};\nclass MessagingModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'fcm');\n  }\n}\nMessagingModule.ɵfac = function MessagingModule_Factory(t) {\n  return new (t || MessagingModule)();\n};\nMessagingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MessagingModule\n});\nMessagingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER, {\n    provide: APP_INITIALIZER,\n    useValue: ɵisMessagingSupportedFactory.async,\n    multi: true\n  }]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MessagingModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER, {\n        provide: APP_INITIALIZER,\n        useValue: ɵisMessagingSupportedFactory.async,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nfunction provideMessaging(fn, ...deps) {\n  return {\n    ngModule: MessagingModule,\n    providers: [{\n      provide: PROVIDED_MESSAGING_INSTANCES,\n      useFactory: messagingInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, ...deps]\n    }]\n  };\n}\nconst isSupported = ɵisMessagingSupportedFactory.async;\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst deleteToken = ɵzoneWrap(deleteToken$1, true);\nconst getMessaging = ɵzoneWrap(getMessaging$1, true);\nconst getToken = ɵzoneWrap(getToken$1, true);\nconst onMessage = ɵzoneWrap(onMessage$1, false);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Messaging, MessagingInstances, MessagingModule, deleteToken, getMessaging, getToken, isSupported, messagingInstance$, onMessage, provideMessaging };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAM,YAAN,MAAgB;AAAA,EACd,YAAY,WAAW;AACrB,WAAO;AAAA,EACT;AACF;AACA,IAAM,0BAA0B;AAChC,IAAM,qBAAN,MAAyB;AAAA,EACvB,cAAc;AACZ,WAAO,mBAAmB,uBAAuB;AAAA,EACnD;AACF;AACA,IAAM,qBAAqB,MAAM,GAAG,GAAG,EAAE,KAAK,UAAU,MAAM,KAAK,mBAAmB,uBAAuB,CAAC,CAAC,GAAG,SAAS,CAAC;AAC5H,IAAM,+BAA+B,IAAI,eAAe,kCAAkC;AAC1F,SAAS,gCAAgC,UAAU,YAAY;AAC7D,MAAI,CAAC,6BAA6B,KAAK,GAAG;AACxC,WAAO;AAAA,EACT;AACA,QAAM,mBAAmB,sBAAsB,yBAAyB,UAAU,UAAU;AAC5F,SAAO,oBAAoB,IAAI,UAAU,gBAAgB;AAC3D;AACA,SAAS,yBAAyB,IAAI;AACpC,SAAO,CAAC,MAAM,aAAa;AACzB,QAAI,CAAC,6BAA6B,KAAK,GAAG;AACxC,aAAO;AAAA,IACT;AACA,UAAM,YAAY,KAAK,kBAAkB,MAAM,GAAG,QAAQ,CAAC;AAC3D,WAAO,IAAI,UAAU,SAAS;AAAA,EAChC;AACF;AACA,IAAM,+BAA+B;AAAA,EACnC,SAAS;AAAA,EACT,MAAM,CAAC,CAAC,IAAI,SAAS,GAAG,4BAA4B,CAAC;AACvD;AACA,IAAM,sCAAsC;AAAA,EAC1C,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,MAAM,CAAC,CAAC,IAAI,SAAS,GAAG,4BAA4B,GAAG,WAAW;AACpE;AACA,IAAM,kBAAN,MAAsB;AAAA,EACpB,cAAc;AACZ,oBAAgB,eAAe,QAAQ,MAAM,KAAK;AAAA,EACpD;AACF;AACA,gBAAgB,OAAO,SAAS,wBAAwB,GAAG;AACzD,SAAO,KAAK,KAAK,iBAAiB;AACpC;AACA,gBAAgB,OAAyB,iBAAiB;AAAA,EACxD,MAAM;AACR,CAAC;AACD,gBAAgB,OAAyB,iBAAiB;AAAA,EACxD,WAAW,CAAC,qCAAqC,8BAA8B;AAAA,IAC7E,SAAS;AAAA,IACT,UAAU,6BAA6B;AAAA,IACvC,OAAO;AAAA,EACT,CAAC;AACH,CAAC;AAAA,CACA,WAAY;AACX,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,iBAAiB,CAAC;AAAA,IACxF,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,WAAW,CAAC,qCAAqC,8BAA8B;AAAA,QAC7E,SAAS;AAAA,QACT,UAAU,6BAA6B;AAAA,QACvC,OAAO;AAAA,MACT,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC,GAAG,WAAY;AACd,WAAO,CAAC;AAAA,EACV,GAAG,IAAI;AACT,GAAG;AACH,SAAS,iBAAiB,OAAO,MAAM;AACrC,SAAO;AAAA,IACL,UAAU;AAAA,IACV,WAAW,CAAC;AAAA,MACV,SAAS;AAAA,MACT,YAAY,yBAAyB,EAAE;AAAA,MACvC,OAAO;AAAA,MACP,MAAM,CAAC,QAAQ,UAAU,wBAAwB,cAAc,GAAG,IAAI;AAAA,IACxE,CAAC;AAAA,EACH;AACF;AACA,IAAM,cAAc,6BAA6B;AAGjD,IAAMA,eAAc,UAAU,aAAe,IAAI;AACjD,IAAM,eAAe,UAAU,sBAAgB,IAAI;AACnD,IAAMC,YAAW,UAAU,UAAY,IAAI;AAC3C,IAAMC,aAAY,UAAU,WAAa,KAAK;",
  "names": ["deleteToken", "getToken", "onMessage"]
}
